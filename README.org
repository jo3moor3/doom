:PROPERTIES:
:ID:       7ebdbbd1-d6c6-4e23-849b-6ca29864ff0f
:END:
#+title: Doom Config
#+PROPERTY:
#+author:    Joe Moore
#+email:     jo3moore@gmail.com
#+caption: Banner
#+latex_class: chameleon
#+html_content_class: chameleon
[[file:images/doom_icon.png]]

My ever expanding all consuming configuration for Doom Emacs.


*** TABLE OF CONTENTS :toc:
- [[#globals][Globals]]
  - [[#constants][Constants]]
  - [[#convenience][Convenience]]
  - [[#completion][Completion]]
  - [[#keybindings][Keybindings]]
- [[#visual][Visual]]
  - [[#theme][Theme]]
  - [[#fontsdocument][Fonts/Document]]
  - [[#faces][Faces]]
  - [[#files][Files]]
  - [[#dashboard][Dashboard]]
- [[#eshell][Eshell]]
  - [[#profile][Profile]]
  - [[#aliases][Aliases]]
  - [[#completion-1][Completion]]
- [[#org][Org]]
  - [[#setup][Setup]]
  - [[#aesthetics][Aesthetics]]
  - [[#latex][LaTeX]]
  - [[#keybindings-1][Keybindings]]
- [[#packages][Packages]]
- [[#init][Init]]
  - [[#inputcompletion][Input/Completion]]
  - [[#ui][UI]]
  - [[#editoremacs][Editor/Emacs]]
  - [[#terminalscheckers][Terminals/Checkers]]
  - [[#toolsos][Tools/OS]]
  - [[#languages][Languages]]
  - [[#emailappconfig][Email/App/Config]]
- [[#code][Code]]
  - [[#codeium][Codeium]]
  - [[#python][Python]]

* Globals
** Constants
*** Disabling
**** Niceties
Stop screen flickering, inhibit the quit confirmation, and disable company completion.
#+begin_src elisp
;May help sreen flickering
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
(setq confirm-kill-emacs nil) ;Disable quit confirmation
(setq company-idle-delay nil) ;Disable company auto-complete
#+end_src
**** No flyspell list
I can manually spellcheck in certain files. I don't need a million notifications about all the spelling errors in my literate configs' code blocks.
#+begin_src emacs-lisp
(defvar no-flyspell-list '("config.org"))

(defun turn-off-flyspell-if-match ()
  (if (member (file-name-nondirectory (buffer-file-name)) no-flyspell-list)
      (flyspell-mode -1)))

(add-hook 'find-file-hook #'turn-off-flyspell-if-match)
#+end_src
**** No line numbers list
List of modes that don't necessarily benefit from having line numbers.
#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
*** Enabling
Better scrolling, quicker which-key, and nested snippets.
#+begin_src emacs-lisp
(when (version< "29.0.50" emacs-version)
  (pixel-scroll-precision-mode))

(setq which-key-idle-delay 0.5)

(setq yas-triggers-in-field t)
#+end_src
*** Spelling
Adding both French and English dictionaries, as well as a keybinding for stepping through document wide spellchecks.
#+begin_src  elisp
(after! ispell
  (setenv "LANG" "en_US.UTF-8")
  (setq ispell-dictionary "en_US,fr_FR")
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,fr_FR"))
(map! :n "SPC I" #'ispell)
(map! :n "C-S-i" #'ispell-word)
#+end_src
*** Info
My name, email, and the location of my projects.
#+begin_src elisp
(setq user-full-name "Theodore Moore"
      user-mail-address "jo3moore@gmail.com")
(setq projectile-project-search-path '("~/Shaders" "~/Documents/GitHub/" "~/code/"))
#+end_src
** Convenience
*** Reloading
Strange bug with flyspell where an error occurs after reloading, only fixed by subsequently reloading org.
I'll work on a cleaner fix for this at some point.
#+begin_src emacs-lisp
(defun reload_all ()
(interactive)
(doom/reload)
(sit-for 3) ; delay for doom/reload to finish
(org-reload))

;For even more stability after reloading.
(add-hook! 'reload_all (doom-load-envvars-file (expand-file-name "env" doom-local-dir) t))

(map! :n "SPC r" #'reload_all)

#+end_src
*** Bury compile buffer
#+begin_src emacs-lisp
(defun bury-compile-buffer-if-successful (buffer string)
  "Bury a compilation buffer if succeeded without warnings "
  (when (and (eq major-mode 'comint-mode)
             (string-match "finished" string)
             (not
              (with-current-buffer buffer
                (search-forward "warning" nil t))))
    (run-with-timer 1 nil
                    (lambda (buf)
                      (let ((window (get-buffer-window buf)))
                        (when (and (window-live-p window)
                                   (eq buf (window-buffer window)))
                          (delete-window window))))
                    buffer)))

(add-hook 'compilation-finish-functions #'bury-compile-buffer-if-successful)
#+end_src
** Completion
*** Cape/Company
**** Cape functions
#+begin_src emacs-lisp
;; Add extensions
(use-package cape
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src
**** Company adapter
Transforming company backends to Capfs.
#+begin_src emacs-lisp
;; Use Company backends as Capfs.
(setq-local completion-at-point-functions
  (mapcar #'cape-company-to-capf
    (list #'company-files #'company-keywords #'company-dabbrev #'company-ispell)))
#+end_src
Merging company backends.
#+begin_src emacs-lisp
(require 'company)
;; Use the company-dabbrev and company-elisp backends together.
(setq completion-at-point-functions
      (list
       (cape-company-to-capf
        (apply-partially #'company--multi-backend-adapter
                         '(company-dabbrev company-elisp)))))
#+end_src
**** Super Capf
Merging multiple Capfs.
#+begin_src emacs-lisp
(setq-local completion-at-point-functions
            (list (cape-capf-super #'cape-dabbrev #'cape-dict #'cape-keyword)))
#+end_src
**** Capf buster
Setting up cache busting so theres always a fresh set of canadites.
#+begin_src emacs-lisp
;(setq-local completion-at-point-functions
;            (list (cape-capf-buster #'some-caching-capf)))
#+end_src
*** Corfu
**** Defaults
#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
   :custom
   (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+end_src
**** candidate overlay
Need to make the keybindings more doom like.
#+begin_src emacs-lisp
  (use-package corfu-candidate-overlay
    :after corfu
    :config
    ;; enable corfu-candidate-overlay mode globally
    ;; this relies on having corfu-auto set to nil
    (corfu-candidate-overlay-mode +1)

    (global-set-key (kbd "M-<tab>") 'completion-at-point)
    ;; bind Ctrl + Shift + Tab to trigger completion of the first candidate
    ;; (keybing <iso-lefttab> may not work for your keyboard model)
    (global-set-key (kbd "C-<iso-tab>") 'corfu-candidate-overlay-complete-at-point))
#+end_src
**** prescient
I'm using [[https://github.com/radian-software/prescient.el][prescient]] to handle sorting/filtering of the corfu completions.
#+begin_src emacs-lisp :tangle packages.el
(package! prescient)
(package! corfu-prescient)
#+end_src
#+begin_src emacs-lisp
(corfu-prescient-mode 1)
#+end_src
**** orderless
[[https://github.com/oantolin/orderless][Orderless]] is an interesting completion style I've been testing out.
#+begin_src emacs-lisp
(use-package corfu
  ;:custom
  ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space
  :bind
  ;; Configure SPC for separator insertion
  (:map corfu-map ("SPC" . corfu-insert-separator)))
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package lsp-mode
  :custom
  (lsp-completion-provider :none) ;; we use Corfu!
  :init
  (defun my/orderless-dispatch-flex-first (_pattern index _total)
    (and (eq index 0) 'orderless-flex))

  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))) ;; Configure orderless

   ;; Optionally configure the first word as flex filtered.
    (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
  :hook
  (lsp-completion-mode . my/lsp-mode-setup-completion))
#+end_src
** Keybindings
*** Save
It's the simple things.
#+begin_src emacs-lisp
(map! :g "C-s" #'save-buffer)
#+end_src
*** Search, find, and replace
Simultaneous editing via iedit and comfortable searching with consult.
#+begin_src emacs-lisp
(map! :desc "iedit" :nv "C-;" #'iedit-mode)

(map! :after evil :gnvi "C-f" #'consult-line)
#+end_src
*** Undo and everywhere
Standard undo/redo and bringing Emacs everywhere.
#+begin_src emacs-lisp
(map! :map emacs-everywhere-mode-map
      "C-c C-c" #'emacs-everywhere--finish-or-ctrl-c-ctrl-c)

(after! undo-fu
  (map! :map undo-fu-mode-map
        "C-S-z" #'undo-fu-only-redo
         :nvi "C-z" #'undo-fu-only-undo))
#+end_src
*** Dired and dashboard
Making Dired behave more like ranger without installing the whole ranger conversion package.
Adding a shortcut to return to the dashboard. In the next section it becomes more apparent why this is useful.
#+begin_src emacs-lisp
(map! :map dired-mode-map
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-alternate-file)

(map! :leader :desc "Dashboard" "d" #'+doom-dashboard/open)
#+end_src
*** Dashboard quick actions
This makes the dashboard 1000x more useful. Adapted from [[https://tecosaur.github.io/emacs-config/config.html#dashboard][Tecosaur's Config]].
Single key press keybindings, a help menu, and shortcuts to everything I could ever need.
#+begin_src emacs-lisp
(defun +doom-dashboard-setup-modified-keymap ()
  (setq +doom-dashboard-mode-map (make-sparse-keymap))
  (map! :map +doom-dashboard-mode-map
        :desc "Find file" :ng "f" #'find-file
        :desc "Recent files" :ng "r" #'consult-recent-file
        :desc "Config dir" :ng "C" #'doom/open-private-config
        :desc "Open config.org" :ng "c" (cmd! (find-file (expand-file-name "config.org" doom-user-dir)))
        :desc "Open dotfile" :ng "." (cmd! (doom-project-find-file "~/.config/"))
        :desc "Open qtile" :ng "q" (cmd! (doom-project-find-file "~/.config/qtile/"))
        :desc "Notes" :ng "n" #'org-roam-node-find
        :desc "Switch buffers (all)" :ng "B" #'consult-buffer
        :desc "IBuffer" :ng "i" #'ibuffer
        :desc "Previous buffer" :ng "p" #'previous-buffer
        :desc "Set theme" :ng "t" #'consult-theme
        :desc "Quit" :ng "Q" #'save-buffers-kill-terminal
        :desc "Show keybindings" :ng "h" (cmd! (which-key-show-keymap '+doom-dashboard-mode-map))))

(add-transient-hook! #'+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap))
(add-transient-hook! #'+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap))
(add-hook! 'doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap))
#+end_src
* Visual
** Theme
Using [[https://draculatheme.com/][Dracula theme]] currently (very unique I know) as it was easy to have it system wide.
Other themes prepackaged in Doom can be viewed here at [[https://github.com/doomemacs/themes][doomemacs/themes]]
#+begin_src elisp
;disabling solaire mode for now because of conflicts
(after! solaire-mode (solaire-global-mode -1))
;       Window opacity for seeing my beautiful desktop
(add-to-list 'default-frame-alist '(alpha . 90))
;Theme config begins
(use-package doom-themes
  :ensure t
  :config
  ;Default theme
  (load-theme 'doom-dracula  t)
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  (setq doom-themes-treemacs-theme "doom-colors") ;; or for treemacs users
  ;(doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Fonts/Document
Setting up font for code/mono space (JetBrains) and for org/variable pitch (Alegreya). Also document setup.
#+begin_src elisp
(setq doom-font (font-spec :family "JetBrainsMonoNerdFont" :size 18))
(setq doom-variable-pitch-font (font-spec :family "Alegreya" :size 18))

(use-package! visual-fill-column
  :hook (visual-line-mode . visual-fill-column-mode)
  :init
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t
        visual-fill-column-fringes-outside-margins nil))
#+end_src
** Faces
Mosty org customizations right now.
#+begin_src elisp :tangle custom.el
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 `(corfu-default ((t (:background ,(doom-color 'bg-alt) :foreground ,(doom-color 'fg)))))
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 '(org-document-info ((t (:foreground "tan"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-document-title ((t (:weight bold :foreground "#FFFFFF" :height 2.5 :underline nil))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 '(org-level-1 ((t (:weight bold :foreground "#86BBD8" :height 2.0))))
 '(org-level-2 ((t (:foreground "#EEB4B3" :height 1.75))))
 '(org-level-3 ((t (:foreground "#F9DB6D" :height 1.5))))
 '(org-level-4 ((t (:foreground "#A1E5AB" :height 1.25))))
 '(org-level-5 ((t (:height 1.15))))
 '(org-level-6 ((t (:height 1.1))))
 '(org-level-7 ((t (:height 1.0))))
 '(org-level-8 ((t (:height 1.0))))
 '(org-link ((t (:foreground "lavender" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src
** Files
#+begin_src emacs-lisp
(after! marginalia
  (setq marginalia-censor-variables nil)

  (defadvice! +marginalia--anotate-local-file-colorful (cand)
    "Just a more colourful version of `marginalia--anotate-local-file'."
    :override #'marginalia--annotate-local-file
    (when-let (attrs (file-attributes (substitute-in-file-name
                                       (marginalia--full-candidate cand))
                                      'integer))
      (marginalia--fields
       ((marginalia--file-owner attrs)
        :width 12 :face 'marginalia-file-owner)
       ((marginalia--file-modes attrs))
       ((+marginalia-file-size-colorful (file-attribute-size attrs))
        :width 7)
       ((+marginalia--time-colorful (file-attribute-modification-time attrs))
        :width 12))))

  (defun +marginalia--time-colorful (time)
    (let* ((seconds (float-time (time-subtract (current-time) time)))
           (color (doom-blend
                   (face-attribute 'marginalia-date :foreground nil t)
                   (face-attribute 'marginalia-documentation :foreground nil t)
                   (/ 1.0 (log (+ 3 (/ (+ 1 seconds) 345600.0)))))))
      ;; 1 - log(3 + 1/(days + 1)) % grey
      (propertize (marginalia--time time) 'face (list :foreground color))))

  (defun +marginalia-file-size-colorful (size)
    (let* ((size-index (/ (log10 (+ 1 size)) 7.0))
           (color (if (< size-index 10000000) ; 10m
                      (doom-blend 'orange 'green size-index)
                    (doom-blend 'red 'orange (- size-index 1)))))
      (propertize (file-size-human-readable size) 'face (list :foreground color)))))
#+end_src
** Dashboard
*** Banner
Custom ASCII banner of my cat's name. I enjoy it more than the fancy-splash image currently.
#+begin_src elisp
(setq fancy-splash-image (concat doom-private-dir "/home/moore/Pictures/bengal.png"))

(defun NONO-EMACS ()
          (let* ((banner '(
"      ___           ___           ___           ___     "
"     /\\__\\         /\\  \\         /\\__\\         /\\  \\    "
"    /::|  |       /::\\  \\       /::|  |       /::\\  \\   "
"   /:|:|  |      /:/\\:\\  \\     /:|:|  |      /:/\\:\\  \\  "
"  /:/|:|  |__   /:/  \\:\\  \\   /:/|:|  |__   /:/  \\:\\  \\ "
" /:/ |:| /\\__\\ /:/__/ \\:\\__\\ /:/ |:| /\\__\\ /:/__/ \\:\\__\\"
" \\/__|:|/:/  / \\:\\  \\ /:/  / \\/__|:|/:/  / \\:\\  \\ /:/  /"
"     |:/:/  /   \\:\\  /:/  /      |:/:/  /   \\:\\  /:/  / "
"     |::/  /     \\:\\/:/  /       |::/  /     \\:\\/:/  /  "
"     /:/  /       \\::/  /        /:/  /       \\::/  /   "
"     \\/__/         \\/__/         \\/__/         \\/__/    "
"                                                        "
"                        E M A C S                       "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 102)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'NONO-EMACS)
#+end_src
*** Menu
#+begin_src emacs-lisp
;;(setq +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 2)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src
* Eshell
I was always more of a vterm guy until I recognized a few use cases for the Eshell.
Namely: tighter Emacs integration (virtual environments) and using Emacs commands.
In addition to that I found some great completion that make me miss Zsh much less. But there is still a ways to go.
** Profile
Adds a random color script from [[https://gitlab.com/dwt1/shell-color-scripts][Derek Taylor's Shell Color Scripts]].
I manually deleted all the ones that I didn't like, or were too big to fit in a small buffer.
Alternatively you can just use =colorscript --blacklist (script index/name)=
#+begin_src emacs-lisp :tangle eshell/profile
colorscript random
#+end_src
** Aliases
*** Necessity
The usual stuff.
#+begin_src emacs-lisp :tangle eshell/aliases
;Standard
alias q exit
alias clear clear-scrollback
alias rg rg --color=always $* ;ripgrep
;Confirm before overwriting something
alias rm rm -i $1
alias mv mv -i $1
alias cp cp -i $1
;Merge Xresources
alias merge xrdb -merge ~/.Xresources
#+end_src
*** ls to eza
[[https://github.com/eza-community/eza][eza]] is based on [[https://github.com/ogham/exa][exa]] which is based off of [[ls]].
They all list files real nice.
#+begin_src emacs-lisp :tangle eshell/aliases
alias ls eza -al --color=always --group-directories-first $* ;my fav
alias la eza -a --color=always --group-directories-first $* ;all files/dirs
alias ll eza -l --color=always --group-directories-first $* ;long format
alias lt eza -at --color=always --group-directories-first $* ;tree listing
alias l. eza -a1 $* | rg "^\." ;show only hidden files
#+end_src
*** Emacs specific
Magit, Doom utilities, and various file commands.
#+begin_src emacs-lisp :tangle eshell/aliases
;Magit aliases
alias gg magit-status
;Aliases for Doom emacs utilities
alias ds ~/.emacs.d/bin/doom sync
alias dc ~/.emacs.d/bin/doom doctor
alias dp ~/.emacs.d/bin/doom purge
alias du ~/.emacs.d/bin/doom upgrade
alias bd eshell-up $1
;Files Aliases
alias f find-file $1
alias ff find-file-other-window $1
alias d dired $1
alias cdp cd-to-project
#+end_src
*** glslViewer
#+begin_src emacs-lisp :tangle eshell/aliases
alias gl glslViewer $1.frag
#+end_src
** Completion
With the addition of [[https://github.com/JonWaltman/pcmpl-args.el][pcmpl-args]]  this completion is almost on par with my native Zsh terminal.
If you use Eshell you need to try to this out. The added Corfu functionality is just the cherry on top.
#+begin_src emacs-lisp
;;Only setup required besides downloading the package
(require 'pcmpl-args)

;;Corfu setup
(add-hook 'eshell-mode-hook
          (lambda ()
            (setq-local corfu-auto nil)
            (corfu-mode)))

(defun corfu-send-shell (&rest _)
  "Send completion candidate when inside comint/eshell."
  (cond
   ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
    (eshell-send-input))
   ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
    (comint-send-input))))

(advice-add #'corfu-insert :after #'corfu-send-shell)
#+end_src
* Org
** Setup
Important org configurations, [[https://github.com/abo-abo/org-download][org-download]]
#+begin_src elisp
(after! spell-fu
  (cl-pushnew 'org-modern-tag (alist-get 'org-mode +spell-excluded-faces-alist)))

(after! org
(setq org-element-use-cache nil)
(setq org-directory "~/org/")
(setq org-roam-index-file "~/org/roam/index.org")
(add-hook 'org-mode-hook 'org-eldoc-load))
(setq org-use-property-inheritance t)
;org download for pasting images
(setq-default org-download-image-dir: "~/Pictures/org-download")
(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** Aesthetics
*** org vanilla
#+begin_src emacs-lisp
(setq org-ellipsis " ▾")
(setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))
(after! org
(setq org-startup-folded t)
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-mode-hook '+org-pretty-mode)
(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook #'mixed-pitch-mode))

(setq mixed-pitch-variable-pitch-cursor nil)
#+end_src
*** org-modern
#+begin_src emacs-lisp
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤")
                          (45 . "–")
                          (42 . "•"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("PROJ" :inverse-video t :inherit +org-todo-project)
          ("STRT" :inverse-video t :inherit +org-todo-active)
          ("[-]"  :inverse-video t :inherit +org-todo-active)
          ("HOLD" :inverse-video t :inherit +org-todo-onhold)
          ("WAIT" :inverse-video t :inherit +org-todo-onhold)
          ("[?]"  :inverse-video t :inherit +org-todo-onhold)
          ("KILL" :inverse-video t :inherit +org-todo-cancel)
          ("NO"   :inverse-video t :inherit +org-todo-cancel))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-block-fringe nil
        org-modern-block-name
        '((t . t)
          ("src" "»" "«")
          ("example" "»–" "–«")
          ("quote" "❝" "❞")
          ("export" "⏩" "⏪"))
        org-modern-progress nil
        org-modern-priority nil
        org-modern-horizontal-rule (make-string 36 ?─)
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("bibliography" . "")
          ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
          ("cite_export" . "⮭")
          ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
          ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("results" . "🠶")))
  (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo)))
#+end_src
** LaTeX
I use latex to render math in org.
[[https://github.com/io12/org-fragtog][org-fragtog]] is wonderfully convenient, [[https://ctan.org/pkg/dvipng?lang=en][dvipng]] is a must for quick preview generation, and [[https://www.gnu.org/software/auctex/][AUCTeX]] is required for this all to work.
#+begin_src elisp
;Make latex fragments easy to edit/preview
(after! org
  (add-hook 'org-mode-hook 'org-fragtog-mode))

;;Setup for previews. dvipng is the fastest, but may not support all
(setq org-preview-latex-default-process 'dvipng)

(load "auctex.el" nil t t)
(require 'tex-mik)
#+end_src
** Keybindings
#+begin_src emacs-lisp
(map! :n "SPC n r t" #'org-roam-tag-add
      (:prefix ("SPC l" . "link")
      :desc "store org link" :nv "s" #'org-store-link
      :desc "insert org link" :nv "i" #'org-insert-link
      :desc "link url" :nv "u" #'org-cliplink
      :desc "link image" :nv "p" #'org-download-clipboard
      ))
#+end_src
* Packages
#+begin_src elisp :tangle packages.el
;VISUAL
(package! all-the-icons)
(package! doom-themes)
;PYTHON____________________
(package! poetry)
(package! conda)
(package! lsp-pyright)
(package! virtualenvwrapper)
(package! dap-mode)
(package! iedit)
;;(package! lsp-python-ms)
(package! nose)
(package! python-pytest)
(package! py-isort)
(package! python-black)
;ORG_____________________
(package! org-modern)
(package! org-download)
(package! pandoc)
(package! ox-pandoc)
;MATH____________________
;(package! xenops)
(package! org-fragtog)
(package! auctex)
;COMPLETION______________
(package! cape)
(package! corfu)
(package! corfu-candidate-overlay)
(package! orderless)
(package! pcmpl-args)
;MISC_____________________
(package! ssh-agency)
#+end_src
* Init
** Input/Completion
#+begin_src elisp :tangle init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico           ; the search engine of the future
        +icons)

#+end_src
** UI
#+begin_src elisp :tangle init.el
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       (treemacs          ; a project drawer, like neotree but cooler
        +lsp +icons )
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       ;workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing
#+end_src
** Editor/Emacs
#+begin_src elisp :tangle init.el
       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       (format +onsave)    ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired              ; making dired pretty [functional]
        +icons
        )
       electric            ; smarter, keyword-based electric-indent
       (ibuffer            ; interactive buffer management
        +icons
        )
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree
#+end_src
** Terminals/Checkers
#+begin_src elisp :tangle init.el
       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell              ; tasing you for misspelling mispelling
        +flyspell
        +hunspell)
       ;;grammar           ; tasing grammar mistake every you make
#+end_src
** Tools/OS
#+begin_src elisp :tangle init.el
       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       (debugger +lsp)     ; FIXME stepping through code, to help you add bugs
       direnv
       ;;docker
       ;editorconfig       ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       ;;lookup            ; navigate your code and its documentation
       (lsp +lsp)          ; M-x vscode
       (magit +forge)      ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb                 ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
      (tty                 ; improve the terminal Emacs experience
       +osc)
#+end_src
** Languages
#+begin_src elisp :tangle init.el
       :lang
       (cc +lsp)         ; C > C++ == 1
       emacs-lisp        ; drown in parentheses
       (gdscript +lsp)   ; the language you waited for
       json              ; At least it ain't XML
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       (latex +lsp       ; writing papers in Emacs has never been so fun
        +latexmk)
       markdown          ; writing docs for people to ignore
       (org              ; organize your plain life in plain text
        +roam2           ; wander around notes
        +pretty          ; better looking org
        +dragndrop       ; drag and drop files/images into org buffers
        +pandoc          ; export-with-pandoc support
        )
       (python +lsp      ; beautiful is better than ugly
        +poetry          ; Python dependency manangement
        +conda           ; Virtual environment support
        +pyright)        ; The best Python language server
       qt                ; the 'cutest' gui framework ever
       (sh +lsp)         ; she sells {ba,z,fi}sh shells on the C xor
       data              ; config/data formats
       ;;plantuml          ; diagrams for confusing people more
       ;;(web +lsp)        ; the tubes
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;(go +lsp)         ; the hipster dialect
       ;;zig               ; C, but simpler
       ;;lua               ; one-based indices? one-based indices
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       ;;php               ; perl's insecure younger brother
       ;;(graphql +lsp)    ; Give queries a REST
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;nim               ; python + lisp at the speed of c
       ;;purescript        ; javascript, but functional
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;yaml              ; JSON, but readable
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
#+end_src
** Email/App/Config
#+begin_src elisp :tangle init.el
       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src
* Code
** Codeium
** Python
*** Debugger/style
#+begin_src elisp
;DEBUGGER
(after! dap-mode
  (setq dap-python-debuger 'debugpy))
;Style
(use-package! python-black
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src
*** Virtual environment
#+begin_src elisp
(setq conda-env-autoactivate-mode t)
(use-package! virtualenvwrapper)
(after! virtualenvwrapper
  (setq venv-location "~/.conda/envs/"))

(use-package! conda
  :ensure t
  :init
  (setq conda-anaconda-home (expand-file-name "~/.conda"))
  (setq conda-env-home-directory (expand-file-name "~/.conda")))
#+end_src
*** Kebindings
#+begin_src elisp
(map! :n "SPC g p" #'magit-push
      (:prefix ("M-p" . "Python")
      :desc "run python" :nv "p" #'run-python
      :desc "activate conda" :nv "a" #'conda-env-activate
      :desc "deactivate conda" :nv "d" #'conda-env-deactivate
      ))
#+end_src
